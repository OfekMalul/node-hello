// Author : Ofek Malul
// Date: 13/1/2024

pipeline {
  // Instructs Jenkins controller to use Specific Agent
  agent {
    label 'agent1'
  }
  
  // Set environment variables to be used throughout the pipeline
  environment {
    IMAGE_NAME = 'node-hello-world'
    IMAGE_TAG = 'latest'
    DOCKERHUB_CREDENTIALS = credentials('ofekmalul-dockerhub')
    DOCKER_REPO = 'ofekmalul/leumi-home-assignment'
  }

  stages {
    // Build the docker image from provided docker file. Utilize SHA for versioning
    stage('Build Docker Image') {
      steps {
        sh '''
            docker build . -t node-hello-world:$( echo $GIT_COMMIT | cut -c1-6 )
        '''
      }
    }

    // Run image. Use get to see the website is reachable.
    // rm index, the wget creates an index file. There is no need for it.
    stage('Run Image and check availability') {
      steps {
        sh '''
            docker run -p 3000:3000 -d node-hello-world:$( echo $GIT_COMMIT | cut -c1-6 )
            wget localhost:3000
            rm index.html.1
        '''
      }
    }

    // Login to DockerHub via provided credentials on Jenkins controller.
    // Push two images. One with tag Latest and one with SHA tag.
    stage('Push to DockerHub') {
      steps {
        sh '''
            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
            docker tag ${IMAGE_NAME}:$( echo $GIT_COMMIT | cut -c1-6 ) ${DOCKER_REPO}:${IMAGE_TAG}
            docker push ${DOCKER_REPO}:${IMAGE_TAG}

            docker tag ${IMAGE_NAME}:$( echo $GIT_COMMIT | cut -c1-6 ) ${DOCKER_REPO}:$( echo $GIT_COMMIT | cut -c1-6 )
            docker push ${DOCKER_REPO}:$( echo $GIT_COMMIT | cut -c1-6 )
        '''
      }
    }

    // SSH to deployment server via provided credentials. 
    // helm upgrade --install. If new Jenkins agent then it will install the helm chart. Else will upgrade the current helm chart.
    stage('Deployment'){
        steps {
            script{
			withCredentials([sshUserPrivateKey(credentialsId:'minikube-deploy-server', keyFileVariable: 'KEY')]){
					sh '''
                    sed -i "s/tag: 'latest'/tag: $( echo $GIT_COMMIT | cut -c1-6 )/g" ./my-helm-chart/values.yaml
                    scp -o StrictHostKeyChecking=no -i ${KEY} -r ./my-helm-chart ubuntu@54.164.82.174:/home/ubuntu/
                    ssh -o StrictHostKeyChecking=no -i ${KEY} ubuntu@54.164.82.174 "
                        minikube kubectl -- delete deployment my-helm-chart --namespace=default
                        helm upgrade --install my-helm-chart my-helm-chart
                        helm ls
                    "
                    '''
				}
			}
        }
    }
  }

    post{
        // Stopping and removing all docker containers, prevents resource usage.
        // Removing all docker images to reduce storage usage.
	    always{
            sh '''
                docker stop $(sudo docker ps -q)
                sudo docker rm $(sudo docker ps -aq)
                docker ps -a
                docker image prune --all
            '''
        }

    } 
}